type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSQUARE
  | RSQUARE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | TRUE
  | FALSE
  | MOD
  | DOT
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | INT
  | STRING
  | VOID
  | BOOL
  | FLOAT
  | RGB
  | CANVAS
  | POINTER
  | FILE
  | RETURN
  | WHILE
  | IF
  | ELSE
  | LITERAL of (int)
  | BLIT of (bool)
  | ID of (string)
  | SLIT of (string)
  | FLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 6 "parser.mly"
open Ast
# 53 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSQUARE *);
  264 (* RSQUARE *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* ASSIGN *);
  270 (* TRUE *);
  271 (* FALSE *);
  272 (* MOD *);
  273 (* DOT *);
  274 (* NOT *);
  275 (* EQ *);
  276 (* NEQ *);
  277 (* LT *);
  278 (* LEQ *);
  279 (* GT *);
  280 (* GEQ *);
  281 (* AND *);
  282 (* OR *);
  283 (* INT *);
  284 (* STRING *);
  285 (* VOID *);
  286 (* BOOL *);
  287 (* FLOAT *);
  288 (* RGB *);
  289 (* CANVAS *);
  290 (* POINTER *);
  291 (* FILE *);
  292 (* RETURN *);
  293 (* WHILE *);
  294 (* IF *);
  295 (* ELSE *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  296 (* LITERAL *);
  297 (* BLIT *);
  298 (* ID *);
  299 (* SLIT *);
  300 (* FLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\003\000\006\000\006\000\008\000\
\008\000\004\000\009\000\009\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\007\000\007\000\011\000\
\011\000\011\000\011\000\011\000\011\000\011\000\012\000\012\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\013\000\013\000\014\000\014\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\002\000\008\000\000\000\001\000\002\000\
\004\000\003\000\003\000\005\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\000\000\002\000\002\000\
\003\000\003\000\005\000\007\000\001\000\005\000\000\000\001\000\
\001\000\001\000\001\000\001\000\001\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\003\000\004\000\003\000\004\000\
\003\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\062\000\000\000\014\000\013\000\015\000\016\000\
\017\000\018\000\019\000\020\000\021\000\001\000\003\000\004\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\008\000\
\000\000\000\000\022\000\000\000\000\000\009\000\000\000\022\000\
\005\000\000\000\000\000\000\000\000\000\000\000\033\000\034\000\
\000\000\036\000\035\000\000\000\029\000\000\000\023\000\000\000\
\000\000\000\000\051\000\052\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\026\000\025\000\000\000\000\000\
\000\000\000\000\000\000\000\000\055\000\000\000\011\000\000\000\
\000\000\000\000\040\000\041\000\050\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\054\000\
\000\000\056\000\000\000\030\000\000\000\000\000\012\000\000\000\
\028\000"

let yydgoto = "\002\000\
\003\000\004\000\015\000\016\000\048\000\022\000\029\000\023\000\
\045\000\046\000\047\000\054\000\082\000\083\000"

let yysindex = "\003\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\220\254\092\255\000\000\090\001\225\254\032\255\018\255\000\000\
\057\255\090\001\000\000\024\255\082\255\000\000\035\000\000\000\
\000\000\035\000\035\000\035\000\069\255\073\255\000\000\000\000\
\021\255\000\000\000\000\003\255\000\000\071\000\000\000\088\255\
\231\000\125\255\000\000\000\000\041\001\096\255\035\000\035\000\
\035\000\035\000\035\000\035\000\008\255\000\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\035\000\000\000\000\000\000\000\255\000\023\001\
\041\001\100\255\098\255\041\001\000\000\102\255\000\000\035\000\
\247\254\247\254\000\000\000\000\000\000\092\001\092\001\058\255\
\058\255\058\255\058\255\076\001\059\001\211\255\211\255\000\000\
\035\000\000\000\097\000\000\000\067\255\041\001\000\000\211\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\104\255\000\000\000\000\118\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\127\255\000\000\000\000\000\000\000\000\
\255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\130\255\000\000\000\000\000\000\
\129\255\000\000\000\000\129\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\255\000\000\131\255\075\255\000\000\000\000\000\000\000\000\
\123\000\149\000\000\000\000\000\000\000\076\255\219\000\007\255\
\159\000\185\000\193\000\011\255\059\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\168\255\085\255\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\000\000\000\000\000\000\000\000\252\255\000\000\101\000\000\000\
\000\000\240\255\217\255\000\000\076\000\000\000"

let yytablesize = 637
let yytable = "\017\000\
\014\000\065\000\066\000\001\000\060\000\018\000\067\000\044\000\
\087\000\044\000\024\000\048\000\044\000\048\000\049\000\021\000\
\048\000\051\000\052\000\053\000\088\000\028\000\057\000\026\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\058\000\025\000\048\000\048\000\059\000\079\000\080\000\
\081\000\084\000\085\000\081\000\061\000\044\000\089\000\090\000\
\091\000\092\000\093\000\094\000\095\000\096\000\097\000\098\000\
\099\000\100\000\101\000\049\000\027\000\049\000\108\000\109\000\
\049\000\030\000\063\000\064\000\065\000\066\000\055\000\107\000\
\113\000\067\000\056\000\053\000\042\000\053\000\042\000\060\000\
\053\000\042\000\060\000\031\000\049\000\032\000\033\000\061\000\
\110\000\060\000\061\000\034\000\019\000\020\000\042\000\042\000\
\078\000\044\000\044\000\035\000\042\000\042\000\104\000\105\000\
\106\000\112\000\006\000\044\000\005\000\006\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000\036\000\037\000\038\000\
\007\000\039\000\040\000\041\000\042\000\043\000\031\000\031\000\
\032\000\077\000\032\000\058\000\050\000\059\000\034\000\086\000\
\000\000\000\000\000\000\000\000\000\000\000\000\035\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\013\000\
\036\000\037\000\038\000\000\000\039\000\040\000\041\000\042\000\
\043\000\027\000\000\000\027\000\027\000\000\000\000\000\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\027\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\027\000\027\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\027\000\027\000\000\000\027\000\
\027\000\027\000\027\000\027\000\031\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\036\000\037\000\
\038\000\000\000\039\000\040\000\041\000\042\000\043\000\037\000\
\000\000\037\000\000\000\000\000\037\000\000\000\000\000\037\000\
\037\000\037\000\037\000\000\000\000\000\000\000\037\000\000\000\
\000\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\037\000\000\000\000\000\005\000\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\013\000\031\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\005\000\006\000\007\000\
\008\000\009\000\010\000\011\000\012\000\013\000\000\000\062\000\
\000\000\000\000\039\000\040\000\041\000\042\000\043\000\063\000\
\064\000\065\000\066\000\000\000\000\000\000\000\067\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\111\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\064\000\065\000\066\000\000\000\000\000\000\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\038\000\000\000\038\000\000\000\000\000\
\038\000\000\000\000\000\038\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\039\000\000\000\039\000\
\000\000\000\000\039\000\000\000\000\000\039\000\039\000\045\000\
\000\000\045\000\000\000\000\000\045\000\000\000\000\000\039\000\
\039\000\039\000\039\000\039\000\039\000\039\000\039\000\000\000\
\000\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\045\000\046\000\000\000\046\000\000\000\000\000\046\000\000\000\
\000\000\047\000\000\000\047\000\000\000\000\000\047\000\000\000\
\000\000\000\000\000\000\046\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\047\000\043\000\000\000\043\000\000\000\000\000\
\043\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\000\000\000\000\000\000\043\000\043\000\063\000\
\064\000\065\000\066\000\043\000\043\000\000\000\067\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\102\000\000\000\000\000\000\000\000\000\000\000\063\000\
\064\000\065\000\066\000\000\000\000\000\000\000\067\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\103\000\000\000\000\000\000\000\000\000\000\000\063\000\
\064\000\065\000\066\000\000\000\000\000\000\000\067\000\000\000\
\000\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\063\000\064\000\065\000\066\000\000\000\000\000\000\000\
\067\000\000\000\000\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\063\000\064\000\065\000\066\000\000\000\
\000\000\000\000\067\000\000\000\000\000\068\000\069\000\070\000\
\071\000\072\000\073\000\074\000\063\000\064\000\065\000\066\000\
\000\000\000\000\000\000\067\000\000\000\000\000\068\000\069\000\
\070\000\071\000\072\000\073\000\063\000\064\000\065\000\066\000\
\000\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\
\070\000\071\000\072\000\073\000\005\000\006\000\007\000\008\000\
\009\000\010\000\011\000\012\000\013\000"

let yycheck = "\004\000\
\000\000\011\001\012\001\001\000\002\001\042\001\016\001\001\001\
\001\001\003\001\042\001\001\001\006\001\003\001\031\000\020\000\
\006\001\034\000\035\000\036\000\013\001\026\000\002\001\006\001\
\029\000\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\013\001\003\001\025\001\026\001\017\001\055\000\056\000\
\057\000\058\000\059\000\060\000\042\001\050\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\001\001\004\001\003\001\102\000\103\000\
\006\001\042\001\009\001\010\001\011\001\012\001\002\001\088\000\
\112\000\016\001\002\001\001\001\001\001\003\001\003\001\003\001\
\006\001\006\001\006\001\002\001\026\001\004\001\005\001\003\001\
\105\000\002\001\006\001\010\001\001\001\002\001\019\001\020\001\
\001\001\102\000\103\000\018\001\025\001\026\001\003\001\006\001\
\003\001\039\001\003\001\112\000\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001\036\001\037\001\038\001\
\003\001\040\001\041\001\042\001\043\001\044\001\002\001\001\001\
\004\001\005\001\001\001\003\001\032\000\003\001\010\001\060\000\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\027\001\
\028\001\029\001\030\001\031\001\032\001\033\001\034\001\035\001\
\036\001\037\001\038\001\255\255\040\001\041\001\042\001\043\001\
\044\001\002\001\255\255\004\001\005\001\255\255\255\255\255\255\
\255\255\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001\031\001\032\001\
\033\001\034\001\035\001\036\001\037\001\038\001\255\255\040\001\
\041\001\042\001\043\001\044\001\002\001\255\255\004\001\255\255\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\036\001\037\001\
\038\001\255\255\040\001\041\001\042\001\043\001\044\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\255\255\255\255\027\001\028\001\029\001\030\001\031\001\
\032\001\033\001\034\001\035\001\002\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\027\001\028\001\029\001\
\030\001\031\001\032\001\033\001\034\001\035\001\255\255\001\001\
\255\255\255\255\040\001\041\001\042\001\043\001\044\001\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\009\001\010\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\001\001\255\255\003\001\
\255\255\255\255\006\001\255\255\255\255\009\001\010\001\001\001\
\255\255\003\001\255\255\255\255\006\001\255\255\255\255\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\003\001\255\255\255\255\255\255\019\001\020\001\009\001\
\010\001\011\001\012\001\025\001\026\001\255\255\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\003\001\255\255\255\255\255\255\255\255\255\255\009\001\
\010\001\011\001\012\001\255\255\255\255\255\255\016\001\255\255\
\255\255\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\026\001\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\016\001\255\255\255\255\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\016\001\255\255\255\255\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\016\001\255\255\255\255\019\001\020\001\
\021\001\022\001\023\001\024\001\009\001\010\001\011\001\012\001\
\255\255\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\021\001\022\001\023\001\024\001\027\001\028\001\029\001\030\001\
\031\001\032\001\033\001\034\001\035\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSQUARE\000\
  RSQUARE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  TRUE\000\
  FALSE\000\
  MOD\000\
  DOT\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  INT\000\
  STRING\000\
  VOID\000\
  BOOL\000\
  FLOAT\000\
  RGB\000\
  CANVAS\000\
  POINTER\000\
  FILE\000\
  RETURN\000\
  WHILE\000\
  IF\000\
  ELSE\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  BLIT\000\
  ID\000\
  SLIT\000\
  FLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 42 "parser.mly"
            ( _1 )
# 407 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "parser.mly"
                 ( ([], [])               )
# 413 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 46 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 421 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl) in
    Obj.repr(
# 47 "parser.mly"
               ( ((_2 :: fst _1), snd _1) )
# 429 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 51 "parser.mly"
  ( { 
   typ = _1;
	 fname = _2;
	 formals = List.rev _4;
	 body = List.rev _7 } )
# 443 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                  ( [] )
# 449 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 59 "parser.mly"
                  ( _1 )
# 456 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 62 "parser.mly"
                             ( [(_1,_2)]     )
# 464 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 63 "parser.mly"
                             ( (_3,_4) :: _1 )
# 473 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 66 "parser.mly"
                ( (_1, _2) )
# 481 "parser.ml"
               : 'vdecl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 69 "parser.mly"
                ( Var(_1,_2) )
# 489 "parser.ml"
               : 'vdecl_stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 70 "parser.mly"
                            ( VarAssign(_1,_2,_4))
# 498 "parser.ml"
               : 'vdecl_stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 73 "parser.mly"
           ( String )
# 504 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 74 "parser.mly"
        ( Int )
# 510 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "parser.mly"
         ( Void )
# 516 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 76 "parser.mly"
         ( Bool )
# 522 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
          ( Float )
# 528 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
        ( Rgb )
# 534 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "parser.mly"
           ( Canvas )
# 540 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 81 "parser.mly"
            ( Pointer )
# 546 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 82 "parser.mly"
         ( File )
# 552 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 85 "parser.mly"
                   ( [] )
# 558 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 86 "parser.mly"
                   ( _2 :: _1 )
# 566 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                                            ( Expr _1   )
# 573 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr_opt) in
    Obj.repr(
# 90 "parser.mly"
                                            ( Return _2 )
# 580 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 91 "parser.mly"
                                            ( Block(List.rev _2) )
# 587 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 92 "parser.mly"
                                            ( If(_3, _5, Block([])) )
# 595 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "parser.mly"
                                            ( If(_3, _5, _7)        )
# 604 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_stmt) in
    Obj.repr(
# 94 "parser.mly"
                                            ( _1 )
# 611 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 95 "parser.mly"
                                            ( While(_3, _5) )
# 619 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
          ( Noexpr )
# 625 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 99 "parser.mly"
          ( _1 )
# 632 "parser.ml"
               : 'expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 102 "parser.mly"
                     ( Literal(_1)            )
# 639 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 103 "parser.mly"
                     ( BoolLit(_1)            )
# 646 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "parser.mly"
                     ( Fliteral(_1)           )
# 653 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 105 "parser.mly"
                     ( Sliteral(_1)             )
# 660 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 106 "parser.mly"
                     ( Id(_1) )
# 667 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 675 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 108 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 683 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 109 "parser.mly"
                     ( Binop(_1, Mul,  _3)   )
# 691 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 699 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 707 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 715 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 723 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 731 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 739 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 747 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 755 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 763 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "parser.mly"
                     ( Binop(_1, Mod,   _3)   )
# 771 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "parser.mly"
                         ( Unop(Neg, _2)      )
# 778 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "parser.mly"
                     ( Unop(Not, _2)          )
# 785 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 123 "parser.mly"
                     ( Assign(_1, _3)         )
# 793 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 124 "parser.mly"
                              ( Call(_1, _3)  )
# 801 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 125 "parser.mly"
                     ( Access(_1, _3)         )
# 809 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 126 "parser.mly"
                                      ( Call((string_of_typ _1), _3) )
# 817 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 127 "parser.mly"
                       ( _2                   )
# 824 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 132 "parser.mly"
                  ( [] )
# 830 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 133 "parser.mly"
               ( List.rev _1 )
# 837 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 136 "parser.mly"
                            ( [_1] )
# 844 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 137 "parser.mly"
                         ( _3 :: _1 )
# 852 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
