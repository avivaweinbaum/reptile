type token =
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACE
  | RBRACE
  | COMMA
  | LSQUARE
  | RSQUARE
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | TRUE
  | FALSE
  | EXP
  | INCR
  | DECR
  | MOD
  | NOT
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | AND
  | OR
  | FUNCTION
  | INT
  | STRING
  | VOID
  | BOOL
  | LITERAL of (int)
  | ID of (string)
  | SLIT of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
# 6 "parser.mly"
open Ast
# 44 "parser.ml"
let yytransl_const = [|
  257 (* SEMI *);
  258 (* LPAREN *);
  259 (* RPAREN *);
  260 (* LBRACE *);
  261 (* RBRACE *);
  262 (* COMMA *);
  263 (* LSQUARE *);
  264 (* RSQUARE *);
  265 (* PLUS *);
  266 (* MINUS *);
  267 (* TIMES *);
  268 (* DIVIDE *);
  269 (* TRUE *);
  270 (* FALSE *);
  271 (* EXP *);
  272 (* INCR *);
  273 (* DECR *);
  274 (* MOD *);
  275 (* NOT *);
  276 (* EQ *);
  277 (* NEQ *);
  278 (* LT *);
  279 (* LEQ *);
  280 (* GT *);
  281 (* GEQ *);
  282 (* AND *);
  283 (* OR *);
  284 (* FUNCTION *);
  285 (* INT *);
  286 (* STRING *);
  287 (* VOID *);
  288 (* BOOL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  289 (* LITERAL *);
  290 (* ID *);
  291 (* SLIT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\005\000\005\000\007\000\007\000\
\004\000\004\000\004\000\004\000\006\000\006\000\008\000\008\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\010\000\010\000\011\000\011\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\008\000\000\000\001\000\002\000\004\000\
\001\000\001\000\001\000\001\000\000\000\002\000\002\000\003\000\
\001\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\002\000\002\000\004\000\003\000\001\000\
\001\000\000\000\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\002\000\000\000\046\000\000\000\010\000\009\000\011\000\012\000\
\001\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\013\000\000\000\000\000\008\000\000\000\
\000\000\004\000\000\000\040\000\041\000\000\000\017\000\000\000\
\018\000\014\000\000\000\000\000\000\000\034\000\035\000\000\000\
\015\000\000\000\000\000\000\000\000\000\000\000\036\000\037\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\039\000\016\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\032\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\000\000"

let yydgoto = "\002\000\
\003\000\004\000\010\000\011\000\015\000\022\000\016\000\034\000\
\035\000\061\000\062\000"

let yysindex = "\004\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\234\254\013\255\102\255\239\254\020\255\018\255\
\000\000\040\255\102\255\000\000\014\255\032\255\000\000\066\255\
\039\255\000\000\066\255\000\000\000\000\066\255\000\000\045\255\
\000\000\000\000\128\255\109\000\050\255\000\000\000\000\066\255\
\000\000\066\255\066\255\066\255\066\255\066\255\000\000\000\000\
\066\255\066\255\066\255\066\255\066\255\066\255\066\255\066\255\
\066\255\000\000\000\000\128\000\047\255\054\255\010\000\010\000\
\023\255\023\255\000\000\023\255\182\000\182\000\199\000\199\000\
\199\000\199\000\165\000\147\000\000\000\066\255\128\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\053\255\000\000\000\000\058\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\101\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\060\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\255\000\000\061\255\236\255\014\000\
\155\255\182\255\000\000\209\255\088\255\248\255\041\000\049\000\
\076\000\084\000\056\255\008\255\000\000\000\000\007\255"

let yygindex = "\000\000\
\000\000\000\000\000\000\245\255\000\000\000\000\000\000\044\000\
\232\255\000\000\000\000"

let yytablesize = 473
let yytable = "\036\000\
\009\000\014\000\038\000\044\000\001\000\039\000\044\000\021\000\
\031\000\045\000\031\000\012\000\045\000\031\000\013\000\060\000\
\017\000\063\000\064\000\065\000\066\000\067\000\018\000\019\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\024\000\031\000\025\000\026\000\046\000\047\000\048\000\
\024\000\027\000\025\000\020\000\028\000\029\000\040\000\023\000\
\027\000\077\000\030\000\028\000\029\000\079\000\059\000\005\000\
\030\000\030\000\030\000\078\000\006\000\030\000\042\000\043\000\
\031\000\032\000\033\000\024\000\037\000\000\000\000\000\031\000\
\032\000\033\000\000\000\027\000\000\000\000\000\028\000\029\000\
\000\000\030\000\030\000\000\000\030\000\000\000\000\000\000\000\
\024\000\000\000\024\000\000\000\000\000\024\000\000\000\000\000\
\000\000\000\000\031\000\032\000\033\000\019\000\000\000\019\000\
\000\000\000\000\019\000\024\000\024\000\019\000\019\000\019\000\
\019\000\024\000\024\000\019\000\019\000\019\000\019\000\000\000\
\019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
\041\000\000\000\005\000\006\000\007\000\008\000\000\000\000\000\
\042\000\043\000\044\000\045\000\000\000\000\000\046\000\047\000\
\048\000\049\000\000\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\022\000\000\000\022\000\000\000\000\000\
\022\000\000\000\000\000\022\000\022\000\022\000\022\000\000\000\
\000\000\000\000\000\000\000\000\022\000\000\000\022\000\022\000\
\022\000\022\000\022\000\022\000\022\000\022\000\023\000\000\000\
\023\000\000\000\000\000\023\000\000\000\000\000\023\000\023\000\
\023\000\023\000\000\000\000\000\000\000\000\000\000\000\023\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\033\000\000\000\033\000\000\000\000\000\033\000\000\000\
\000\000\033\000\033\000\033\000\033\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\020\000\000\000\020\000\000\000\
\000\000\020\000\000\000\000\000\020\000\020\000\000\000\000\000\
\025\000\000\000\025\000\000\000\000\000\025\000\000\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\020\000\000\000\
\000\000\000\000\000\000\025\000\025\000\000\000\021\000\000\000\
\021\000\025\000\025\000\021\000\044\000\045\000\021\000\021\000\
\046\000\047\000\048\000\049\000\000\000\005\000\006\000\007\000\
\008\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\026\000\000\000\026\000\000\000\000\000\026\000\000\000\
\000\000\027\000\000\000\027\000\000\000\000\000\027\000\000\000\
\000\000\000\000\000\000\000\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\027\000\027\000\027\000\027\000\
\027\000\027\000\027\000\027\000\028\000\000\000\028\000\000\000\
\000\000\028\000\000\000\000\000\029\000\000\000\029\000\000\000\
\000\000\029\000\000\000\000\000\000\000\000\000\000\000\028\000\
\028\000\028\000\028\000\028\000\028\000\028\000\028\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\058\000\
\000\000\000\000\000\000\000\000\000\000\042\000\043\000\044\000\
\045\000\000\000\000\000\046\000\047\000\048\000\049\000\000\000\
\050\000\051\000\052\000\053\000\054\000\055\000\056\000\057\000\
\042\000\043\000\044\000\045\000\000\000\000\000\046\000\047\000\
\048\000\049\000\000\000\050\000\051\000\052\000\053\000\054\000\
\055\000\056\000\057\000\042\000\043\000\044\000\045\000\000\000\
\000\000\046\000\047\000\048\000\049\000\000\000\050\000\051\000\
\052\000\053\000\054\000\055\000\056\000\042\000\043\000\044\000\
\045\000\000\000\000\000\046\000\047\000\048\000\049\000\000\000\
\050\000\051\000\052\000\053\000\054\000\055\000\042\000\043\000\
\044\000\045\000\000\000\000\000\046\000\047\000\048\000\049\000\
\000\000\000\000\000\000\052\000\053\000\054\000\055\000\042\000\
\043\000\044\000\045\000\000\000\000\000\046\000\047\000\048\000\
\049\000"

let yycheck = "\024\000\
\000\000\013\000\027\000\003\001\001\000\030\000\006\001\019\000\
\001\001\003\001\003\001\034\001\006\001\006\001\002\001\040\000\
\034\001\042\000\043\000\044\000\045\000\046\000\003\001\006\001\
\049\000\050\000\051\000\052\000\053\000\054\000\055\000\056\000\
\057\000\002\001\027\001\004\001\005\001\015\001\016\001\017\001\
\002\001\010\001\004\001\004\001\013\001\014\001\002\001\034\001\
\010\001\003\001\019\001\013\001\014\001\078\000\005\001\003\001\
\001\001\019\001\003\001\006\001\003\001\006\001\003\001\003\001\
\033\001\034\001\035\001\002\001\025\000\255\255\255\255\033\001\
\034\001\035\001\255\255\010\001\255\255\255\255\013\001\014\001\
\255\255\026\001\027\001\255\255\019\001\255\255\255\255\255\255\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\001\001\255\255\003\001\
\255\255\255\255\006\001\020\001\021\001\009\001\010\001\011\001\
\012\001\026\001\027\001\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\001\001\255\255\029\001\030\001\031\001\032\001\255\255\255\255\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\001\001\255\255\003\001\255\255\255\255\
\006\001\255\255\255\255\009\001\010\001\011\001\012\001\255\255\
\255\255\255\255\255\255\255\255\018\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\027\001\001\001\255\255\
\003\001\255\255\255\255\006\001\255\255\255\255\009\001\010\001\
\011\001\012\001\255\255\255\255\255\255\255\255\255\255\018\001\
\255\255\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\009\001\010\001\011\001\012\001\255\255\255\255\255\255\
\255\255\255\255\018\001\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\009\001\010\001\255\255\255\255\
\001\001\255\255\003\001\255\255\255\255\006\001\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\255\255\255\255\255\255\020\001\021\001\255\255\001\001\255\255\
\003\001\026\001\027\001\006\001\011\001\012\001\009\001\010\001\
\015\001\016\001\017\001\018\001\255\255\029\001\030\001\031\001\
\032\001\020\001\021\001\022\001\023\001\024\001\025\001\026\001\
\027\001\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\001\001\255\255\003\001\255\255\255\255\006\001\255\255\
\255\255\255\255\255\255\255\255\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\027\001\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\001\001\255\255\003\001\255\255\
\255\255\006\001\255\255\255\255\255\255\255\255\255\255\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\020\001\
\021\001\022\001\023\001\024\001\025\001\026\001\027\001\003\001\
\255\255\255\255\255\255\255\255\255\255\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\027\001\
\009\001\010\001\011\001\012\001\255\255\255\255\015\001\016\001\
\017\001\018\001\255\255\020\001\021\001\022\001\023\001\024\001\
\025\001\026\001\027\001\009\001\010\001\011\001\012\001\255\255\
\255\255\015\001\016\001\017\001\018\001\255\255\020\001\021\001\
\022\001\023\001\024\001\025\001\026\001\009\001\010\001\011\001\
\012\001\255\255\255\255\015\001\016\001\017\001\018\001\255\255\
\020\001\021\001\022\001\023\001\024\001\025\001\009\001\010\001\
\011\001\012\001\255\255\255\255\015\001\016\001\017\001\018\001\
\255\255\255\255\255\255\022\001\023\001\024\001\025\001\009\001\
\010\001\011\001\012\001\255\255\255\255\015\001\016\001\017\001\
\018\001"

let yynames_const = "\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  LSQUARE\000\
  RSQUARE\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  TRUE\000\
  FALSE\000\
  EXP\000\
  INCR\000\
  DECR\000\
  MOD\000\
  NOT\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  AND\000\
  OR\000\
  FUNCTION\000\
  INT\000\
  STRING\000\
  VOID\000\
  BOOL\000\
  EOF\000\
  "

let yynames_block = "\
  LITERAL\000\
  ID\000\
  SLIT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    Obj.repr(
# 38 "parser.mly"
            ( _1 )
# 321 "parser.ml"
               : Ast.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "parser.mly"
                 ( ([], [])               )
# 327 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'decls) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'fdecl) in
    Obj.repr(
# 42 "parser.mly"
               ( (fst _1, (_2 :: snd _1)) )
# 335 "parser.ml"
               : 'decls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'formals_opt) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 46 "parser.mly"
  ( { 
   typ = _1;
	 fname = _2;
	 formals = List.rev _4;
	 body = List.rev _7 } )
# 349 "parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "parser.mly"
                  ( [] )
# 355 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 54 "parser.mly"
                  ( _1 )
# 362 "parser.ml"
               : 'formals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "parser.mly"
                             ( [(_1,_2)]     )
# 370 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'formal_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                             ( (_3,_4) :: _1 )
# 379 "parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "parser.mly"
           ( String )
# 385 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "parser.mly"
        ( Int )
# 391 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "parser.mly"
         ( Void )
# 397 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "parser.mly"
         ( Bool )
# 403 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "parser.mly"
          ( [] )
# 409 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 68 "parser.mly"
                   ( _2 :: _1 )
# 417 "parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 71 "parser.mly"
                                            ( Expr _1   )
# 424 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    Obj.repr(
# 72 "parser.mly"
                                            ( Block(_2) )
# 431 "parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 75 "parser.mly"
                     ( Literal(_1)            )
# 438 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 76 "parser.mly"
                     ( String(_1)             )
# 445 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 77 "parser.mly"
                     ( Id(_1) )
# 452 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                     ( Binop(_1, Add,   _3)   )
# 460 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 79 "parser.mly"
                     ( Binop(_1, Sub,   _3)   )
# 468 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 80 "parser.mly"
                     ( Binop(_1, Mult,  _3)   )
# 476 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                     ( Binop(_1, Div,   _3)   )
# 484 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 82 "parser.mly"
                     ( Binop(_1, Equal, _3)   )
# 492 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "parser.mly"
                     ( Binop(_1, Neq,   _3)   )
# 500 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 84 "parser.mly"
                     ( Binop(_1, Less,  _3)   )
# 508 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 85 "parser.mly"
                     ( Binop(_1, Leq,   _3)   )
# 516 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 86 "parser.mly"
                     ( Binop(_1, Greater, _3) )
# 524 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 87 "parser.mly"
                     ( Binop(_1, Geq,   _3)   )
# 532 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 88 "parser.mly"
                     ( Binop(_1, And,   _3)   )
# 540 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 89 "parser.mly"
                     ( Binop(_1, Or,    _3)   )
# 548 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                     ( Binop(_1, Exp,   _3)   )
# 556 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 91 "parser.mly"
                     ( Binop(_1, Mod,   _3)   )
# 564 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 92 "parser.mly"
                         ( Unop(Neg, _2)      )
# 571 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 93 "parser.mly"
                     ( Unop(Not, _2)          )
# 578 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 94 "parser.mly"
                     ( Inc(_1, Incr)         )
# 585 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 95 "parser.mly"
                     ( Inc(_1, Decr)         )
# 592 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'args_opt) in
    Obj.repr(
# 96 "parser.mly"
                              ( Call(_1, _3)  )
# 600 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 97 "parser.mly"
                       ( _2                   )
# 607 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "parser.mly"
                     ( BoolLit(true) )
# 613 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 99 "parser.mly"
                     ( BoolLit(false) )
# 619 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "parser.mly"
                  ( [] )
# 625 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args_list) in
    Obj.repr(
# 103 "parser.mly"
               ( List.rev _1 )
# 632 "parser.ml"
               : 'args_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 106 "parser.mly"
                            ( [_1] )
# 639 "parser.ml"
               : 'args_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 107 "parser.mly"
                         ( _3 :: _1 )
# 647 "parser.ml"
               : 'args_list))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.program)
